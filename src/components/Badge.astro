---
import { Badge as BadgeComponent } from '@/components/ui/badge'
import { cn } from '@/lib/utils'
import { Icon } from 'astro-icon/components'

interface Props {
  variant?: 'default' | 'destructive' | 'outline' | 'muted'
  className?: string
  children?: any
  text?: string
  showIcon?: boolean
}

const {
  variant = 'muted',
  className = '',
  children,
  text,
  showIcon = true,
} = Astro.props

const categoryMappings = [
  {
    keywords: ['python'],
    style: {
      icon: 'lucide:code',
    },
  },
  {
    keywords: ['typescript', 'javascript'],
    style: {
      icon: 'lucide:code-2',
    },
  },
  {
    keywords: ['react', 'next.js', 'nextjs'],
    style: {
      icon: 'lucide:atom',
    },
  },
  {
    keywords: ['pytorch', 'tensorflow', 'machine learning', 'ml'],
    style: {
      icon: 'lucide:brain',
    },
  },
  {
    keywords: ['postgresql', 'database', 'sql'],
    style: {
      icon: 'lucide:database',
    },
  },
  {
    keywords: ['docker', 'kubernetes'],
    style: {
      icon: 'lucide:container',
    },
  },
  {
    keywords: ['vercel', 'deployment'],
    style: {
      icon: 'lucide:cloud',
    },
  },
  {
    keywords: ['gcp', 'aws', 'cloud'],
    style: {
      icon: 'lucide:cloud-cog',
    },
  },
  {
    keywords: ['c++', 'cpp'],
    style: {
      icon: 'lucide:cpu',
    },
  },
  {
    keywords: ['llama', 'whisper', 'llm'],
    style: {
      icon: 'lucide:sparkles',
    },
  },
  {
    keywords: ['rag', 'retrieval'],
    style: {
      icon: 'lucide:search',
    },
  },
  {
    keywords: ['scripting'],
    style: {
      icon: 'lucide:scroll-text',
    },
  },
  {
    keywords: ['commercial'],
    style: {
      icon: 'lucide:building-2',
    },
  },
  {
    keywords: ['contract'],
    style: {
      icon: 'lucide:file-text',
    },
  },
  {
    keywords: ['team'],
    style: {
      icon: 'lucide:users',
    },
  },
  {
    keywords: ['internship', 'intern'],
    style: {
      icon: 'lucide:briefcase',
    },
  },
  {
    keywords: ['astro'],
    style: {
      icon: 'lucide:rocket',
    },
  },
  {
    keywords: ['figma', 'design'],
    style: {
      icon: 'lucide:palette',
    },
  },
  {
    keywords: ['hugging face', 'transformers'],
    style: {
      icon: 'lucide:heart',
    },
  },
  {
    keywords: ['milvus', 'vector'],
    style: {
      icon: 'lucide:layers',
    },
  },
]

const getCategoryStyle = (content: string) => {
  const lowerContent = content.toLowerCase()

  const match = categoryMappings.find((category) =>
    category.keywords.some((keyword) => lowerContent.includes(keyword)),
  )

  return match?.style
}

const content = text || (typeof children === 'string' ? children : '')
const categoryStyle = getCategoryStyle(content)
---

<BadgeComponent
  variant={categoryStyle ? 'muted' : variant}
  className={cn(
    categoryStyle && 'border-border',
    categoryStyle && '!bg-[hsl(287,100%,95.5%)]',
    categoryStyle && '!text-[hsl(352.7,60%,30%)]',
    className,
  )}
  client:load
>
  {
    showIcon && categoryStyle && (
      <Icon name={categoryStyle.icon} class="size-3" />
    )
  }
  {!showIcon && !categoryStyle && <Icon name="lucide:hash" class="size-3" />}
  <slot>{text}</slot>
</BadgeComponent>
